import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'BMI AI Suggestion App',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'BMI AI Suggestion App'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});
  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  var wtController = TextEditingController();
  var ftController = TextEditingController();
  var inController = TextEditingController();
  var result = "";
  var suggestion = "";
  bool isLoading = false;

  final String apiKey = "Your API key here";

  Future<void> fetchDietSuggestion(double bmi) async {
    setState(() {
      isLoading = true;
      suggestion = "";
    });

    var url =
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$apiKey";

    var headers = {'Content-Type': 'application/json'};

    var body = jsonEncode({
      "contents": [
        {
          "parts": [
            {"text": "Suggest a diet plan for a person with BMI $bmi"}
          ]
        }
      ]
    });

    try {
      var response = await http.post(Uri.parse(url), headers: headers, body: body);

      if (response.statusCode == 200) {
        var data = jsonDecode(response.body);
        var aiResponse = data['candidates'][0]['content']['parts'][0]['text'];

        setState(() {
          suggestion = aiResponse;
        });
      } else {
        setState(() {
          suggestion = "Failed to fetch suggestion. Error ${response.statusCode}";
        });
      }
    } catch (e) {
      setState(() {
        suggestion = "Error: $e";
      });
    } finally {
      setState(() {
        isLoading = false;
      });
    }
  }

  void calculateBMI() {
    var wt = wtController.text.toString();
    var ft = ftController.text.toString();
    var inch = inController.text.toString();

    if (wt != "" && ft != "" && inch != "") {
      var iWt = int.parse(wt);
      var iFt = int.parse(ft);
      var iInch = int.parse(inch);

      var tInch = (iFt * 12) + iInch;
      var tCm = (tInch * 2.54);
      var tM = (tCm / 100);
      var bmi = iWt / (tM * tM);
      var msg = "";

      if (bmi > 25) {
        msg = "Overweight";
      } else if (bmi < 18.5) {
        msg = "Underweight";
      } else {
        msg = "Normal";
      }

      setState(() {
        result = "Your BMI is ${bmi.toStringAsFixed(2)} ($msg)";
      });

      fetchDietSuggestion(bmi);
    } else {
      setState(() {
        result = "Please fill all the fields.";
        suggestion = "";
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          backgroundColor: Theme.of(context).colorScheme.inversePrimary,
          title: Text(widget.title),
        ),
        body: SingleChildScrollView(
          child: Center(
            child: Container(
              padding: EdgeInsets.all(20),
              width: 350,  // to give it a nice card layout width
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Text("BMI Analyzer",
                      style:
                          TextStyle(fontSize: 32, fontWeight: FontWeight.bold)),
                  SizedBox(height: 10),
                  Text("Enter your details",
                      style: TextStyle(
                          fontSize: 18, fontWeight: FontWeight.w500)),
                  SizedBox(height: 30),
                  TextField(
                    controller: wtController,
                    decoration: InputDecoration(
                        labelText: "Weight (kg)",
                        prefixIcon: Icon(Icons.monitor_weight)),
                    keyboardType: TextInputType.number,
                  ),
                  SizedBox(height: 20),
                  TextField(
                    controller: ftController,
                    decoration: InputDecoration(
                        labelText: "Height (feet)",
                        prefixIcon: Icon(Icons.height)),
                    keyboardType: TextInputType.number,
                  ),
                  SizedBox(height: 20),
                  TextField(
                    controller: inController,
                    decoration: InputDecoration(
                        labelText: "Height (inches)",
                        prefixIcon: Icon(Icons.height_outlined)),
                    keyboardType: TextInputType.number,
                  ),
                  SizedBox(height: 30),
                  ElevatedButton(
                      onPressed: calculateBMI,
                      child: Text("Calculate BMI & Get Suggestion")),
                  SizedBox(height: 30),
                  Text(
                    result,
                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.w600),
                    textAlign: TextAlign.center,
                  ),
                  SizedBox(height: 20),
                  isLoading
                      ? CircularProgressIndicator()
                      : Text(
                          suggestion,
                          style: TextStyle(fontSize: 16),
                          textAlign: TextAlign.center,
                        ),
                ],
              ),
            ),
          ),
        ));
  }
}
